use!(
    module!("common.precedence"),
    module!("common.patterns"),
    module!("common.debug"),
);

def pi -> $Real :: 3.141592653589793;
def tau -> $Real :: 6.283185307179586;

def e -> $Real :: 2.718281828459045;

def +{$Number} -> $Number :: arg;

-- The following functions are provided for ease of use in new number formats.
-- Those that have no implementation will receive one eventually.
-- For primitives, transpilers will usually insert a hardware implementation instead.

def {$Real}.factorial() -> $Real;

-- TODO Use CORDIC for sin and cos
def sin(x '$Real) -> $Real;
def cos(x '$Real) -> $Real;
def tan(x '$Real) -> $Real;
def sinh(x '$Real) -> $Real;
def cosh(x '$Real) -> $Real;
def tanh(x '$Real) -> $Real;
def arcsin(x '$Real) -> $Real;
def arccos(x '$Real) -> $Real;
def arctan(x '$Real) -> $Real;
def arcsinh(x '$Real) -> $Real;
def arccosh(x '$Real) -> $Real;
def arctanh(x '$Real) -> $Real;

def ceil(x '$Real) -> $Real;
def floor(x '$Real) -> $Real;
def round(x '$Real) -> $Real;

def abs(x '$Real) -> $Real;
