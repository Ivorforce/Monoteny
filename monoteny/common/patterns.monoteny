pattern positive(LeftUnaryPrecedence) :: + {arg};
pattern negative(LeftUnaryPrecedence) :: - {arg};
-- TODO Alias differently?
pattern not_f(LeftUnaryPrecedence) :: not {arg};

pattern exponent(ExponentiationPrecedence) :: {lhs} ** {rhs};

pattern multiply(MultiplicationPrecedence) :: {lhs} * {rhs};
pattern divide(MultiplicationPrecedence) :: {lhs} / {rhs};
pattern modulo(MultiplicationPrecedence) :: {lhs} % {rhs};

pattern add(AdditionPrecedence) :: {lhs} + {rhs};
pattern subtract(AdditionPrecedence) :: {lhs} - {rhs};

pattern is_equal(ComparisonPrecedence) :: {lhs} == {rhs};
pattern is_not_equal(ComparisonPrecedence) :: {lhs} != {rhs};
pattern is_greater(ComparisonPrecedence) :: {lhs} > {rhs};
pattern is_greater_or_equal(ComparisonPrecedence) :: {lhs} >= {rhs};
pattern is_lesser(ComparisonPrecedence) :: {lhs} < {rhs};
pattern is_lesser_or_equal(ComparisonPrecedence) :: {lhs} <= {rhs};

-- TODO Alias differently?
pattern and_f(LogicalConjunctionPrecedence) :: {lhs} and {rhs};

-- TODO Alias differently?
pattern or_f(LogicalDisjunctionPrecedence) :: {lhs} or {rhs};
