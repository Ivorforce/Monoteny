-- This tests whether we can define a custom grammar.

precedence_order!([
    LeftUnaryPrecedence(LeftUnary),
    ExponentiationPrecedence(Right),
    MultiplicationPrecedence(Left),
    AdditionPrecedence(Left),
    ComparisonPrecedence(LeftConjunctivePairs),
    LogicalConjunctionPrecedence(Left),
    LogicalDisjunctionPrecedence(Left),
]);

![pattern(- val, LeftUnaryPrecedence)]
def _neg(val '$Number) -> $Number :: negative(val);

![pattern(lhs + rhs, AdditionPrecedence)]
def _add(lhs '$Number, rhs '$Number) -> $Number :: add(lhs, rhs);

![pattern(lhs * rhs, MultiplicationPrecedence)]
def _multiply(lhs '$Number, rhs '$Number) -> $Number :: multiply(lhs, rhs);

def main! :: {
    _write_line(format(1 + -2 * 2 'Int32));
};

def transpile! :: {
    transpiler.add(main);
};
