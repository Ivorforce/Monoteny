-- Tests conformance to traits.

use!(module!("common"));

trait Animal {
    def (self 'Self).talk() -> String;
};

trait Cat {};

-- Declare every Cat subtype is Animal.
declare $Cat is Animal {
    def (self 'Self).talk() -> String :: "Meow";
};

trait Dog {};

-- Declare just the Dog struct is Animal.
declare Dog is Animal {
   def (self 'Self).talk() -> String :: "Bark";
};

def converse(lhs '$Animal#lhs, rhs '$Animal#rhs) :: {
    write_line("Conversation: \n    \(lhs.talk()) \n    \(rhs.talk())");
};

def main! :: {
    let dog = Dog();
    let cat = Cat();

    write_line(dog.talk());
    write_line(cat.talk());
    converse(cat, dog);
    converse(dog, cat);
};

def transpile! :: {
    transpiler.add(main);
};
