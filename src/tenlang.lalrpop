use std::str::FromStr;
use crate::abstract_syntax::{Program, Extension, Expression, Opcode, Statement, GlobalStatement, MemberStatement, Mutability, Function, Parameter, TypeDeclaration, PassedArgument, FunctionCallType};

grammar;

// =============================== Util =====================================

OptionalFinalSeparatorList<E,S>: Vec<E> =
    <v0:(<E> S)*> <e1:E?> =>
        v0.into_iter().chain(e1).collect();

match {
    r"[0-9]+" => _Number,
    r"\x22[^\x22]*\x22" => String,
    "return",
    "(", ")", "{", "}", "[",  "]",
    ";", ",", ":",
    "=", "?",
    "+", "-", "*", "/",
    "let", "var",
    "fn", "extension",
} else {
    r"[a-zA-Z_]\w*" => _Identifier,
    _
}


// =============================== Global =====================================


pub Program: Program = {
    <stmts: (<GlobalStatement>)*> => Program { global_statements: stmts }
};

pub GlobalStatement: Box<GlobalStatement> = {
    Function => Box::new(GlobalStatement::FunctionDeclaration(<>)),
    Extension => Box::new(GlobalStatement::Extension(<>))
};

Function: Box<Function> = {
    "fn" <identifier: Identifier> "(" <parameters: OptionalFinalSeparatorList<Parameter, ",">> ")" <return_type: ("->" <TypeDeclaration>)?> "{" <body: (<Statement> ";")*> "}" => Box::new(Function {
        identifier, parameters, return_type, body
    }),
}

Parameter: Box<Parameter> = {
    <name: Identifier> ":" <param_type: TypeDeclaration> => Box::new(Parameter {
        internal_name: name.clone(), external_name: name.clone(), param_type
    }),
    <external_name: Identifier> <internal_name: Identifier> ":" <param_type: TypeDeclaration> => Box::new(Parameter {
        internal_name, external_name, param_type
    }),
}

// =============================== Member =====================================

pub Extension: Box<Extension> = {
    "extension" <type_declaration: TypeDeclaration> "{" <statements: (<MemberStatement>)*> "}" => Box::new(Extension {
        type_declaration, statements
    })
};

pub MemberStatement: Box<MemberStatement> = {
    Function => Box::new(MemberStatement::FunctionDeclaration(<>)),
};

// =============================== Type =====================================


TypeDeclaration: Box<TypeDeclaration> = {
    Identifier => Box::new(TypeDeclaration::Identifier(<>)),
    <TypeDeclaration> "[" <OptionalFinalSeparatorList<Expression, ",">> "]" => Box::new(TypeDeclaration::NDArray(<>))
}


// =============================== Code =====================================


pub Statement: Box<Statement> = {
    <mutability: VariableDeclarationMutability> <identifier: Identifier> ":" <type_declaration: TypeDeclaration> "=" <expression: Expression> => Box::new(Statement::VariableDeclaration { mutability, identifier, type_declaration: Some(type_declaration), expression }),
    <mutability: VariableDeclarationMutability> <identifier: Identifier> "=" <expression: Expression> => Box::new(Statement::VariableDeclaration { mutability, identifier, type_declaration: None, expression }),
    <i: Identifier> "=" <e: Expression> => Box::new(Statement::VariableAssignment(i, e)),
    "return" <Expression> => Box::new(Statement::Return(<>)),
    Expression => Box::new(Statement::Expression(<>)),
};

BinaryOperator<Operator, NextOperatorLevel>: Box<Expression> = {
    BinaryOperator<Operator, NextOperatorLevel> Operator NextOperatorLevel => Box::new(Expression::BinaryOperator(<>)),
    NextOperatorLevel
};

Expression: Box<Expression> = FunctionCallElement;

FunctionCallElement = {
    <Expression> "(" <OptionalFinalSeparatorList<PassedArgument, ",">> ")" => Box::new(Expression::FunctionCall(FunctionCallType::Call, <>)),
    <Expression> "[" <OptionalFinalSeparatorList<PassedArgument, ",">> "]" => Box::new(Expression::FunctionCall(FunctionCallType::Subscript, <>)),
    <Expression> "." <Identifier> => Box::new(Expression::MemberLookup(<>)),
    SumElement
}
SumElement = BinaryOperator<SumOperator, MultiplicationElement>;
MultiplicationElement = BinaryOperator<FactorOperator, Term>;

PassedArgument: Box<PassedArgument> = {
    <name: Identifier> ":" <value: Expression> => Box::new(PassedArgument { name: Some(name), value }),
    <value: Expression> => Box::new(PassedArgument { name: None, value })
}

SumOperator: Opcode = { // (3)
    "+" => Opcode::Add,
    "-" => Opcode::Subtract,
};

FactorOperator: Opcode = {
    "*" => Opcode::Multiply,
    "/" => Opcode::Divide,
};

VariableDeclarationMutability: Mutability = {
    "let" => Mutability::Immutable,
    "var" => Mutability::Mutable,
};

Term: Box<Expression> = {
    Num => Box::new(Expression::Number(<>)),
    Identifier => Box::new(Expression::VariableLookup(<>)),
    "(" <Expression> ")",
    "[" <OptionalFinalSeparatorList<Expression, ",">> "]" => Box::new(Expression::ArrayLiteral(<>)),
    String => Box::new(Expression::StringLiteral(String::from(<>)))
};


// =============================== Primitive =====================================


Num: i32 = {
    _Number => i32::from_str(<>).unwrap()
};

Identifier: String = {
    _Identifier => format!("{}", <>)
};
