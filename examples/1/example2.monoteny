use!(module!("common"));

def (self '$Number).square() -> $Number :: self * self;

declare List<$Real> is Summable {
    def (self 'Self).sum() :: self.reduce(+);
}

declare MyList is Collection<$Real> {
    def (self 'Self).count -> $Int :: self.list.count;
}

def add(element: $Real, to_list: List<super $Real>) :: to_list.push(element);

def main! :: {
    write_line(2.square() ** 3 'Float32);
}

def transpile! :: {
    transpiler.add(main);
}
