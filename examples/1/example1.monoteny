pattern floor_div(MultiplicationPrecedence) :: {_: lhs} /_ {_: rhs};

def {$Float} /_ {$Float} -> $Float :: lhs / rhs;

def square(_: a '$Number) -> $Number :: a * a;

def {$Number}.square() -> $Number :: square(self);

def kinda_pi -> $Float :: 3.1415926;
def kinda_pi -> $Int :: 3;

def main() :: {
    print("Test: ");

    let a 'Float32 = 2.2.square() * 3;

    var b = square(5) + kinda_pi;
    upd b = b.square() ** -2.2 /_ a // 2;

    var c 'Int32 = kinda_pi;

    print(b < 2 and not (a > 2) and true);
}
