-- import(monoteny.dialects.common.0.0);

pattern floor_div(MultiplicationPrecedence) :: {lhs} /_ {rhs};

def {$Float} /_ {$Float} -> $Float :: lhs / rhs;

def {$Number}.square() -> $Number :: self * self;

def square(value: '$Number) -> $Number :: value.square();

def pi_ish -> $Float :: 3.14;
def pi_ish -> $Int :: 3;

def main() :: {
    -- Print string
    print("Test: ");

    -- 'value' not bound yet
    let value = 2.2.square() * e;

    -- Bind 'value' implicitly by binding b to Float32
    var b 'Float32 = square(value:) + pi_ish;
    upd b = b.square() ** -2.2 /_ value + tau;

    -- Use constant-like function overload pi_ish -> $Int
    var c 'Int32 = pi_ish;

    -- Print boolean
    print(b < 2 and not (value > 2) and true);
}
