trait Animal {
    def {Self}.talk() -> String;
};

trait Cat {};

-- Declare every Cat subtype is Animal.
declare $Cat is Animal {
    def {Self}.talk() -> String :: "Meow";
};

trait Dog {};

-- Declare just the Dog struct is Animal.
declare Dog is Animal {
   def {Self}.talk() -> String :: "Bark";
};

def converse(lhs '$Animal#lhs, rhs '$Animal#rhs) :: {
    write_line("\(lhs.talk()) \(rhs.talk())");
};

@main
def main() :: {
    let dog = Dog();
    let cat = Cat();

    write_line(dog.talk());
    write_line(cat.talk());
    converse(cat, dog);
    converse(dog, cat);
};

@transpile
def transpile(transpiler 'Transpiler) :: {
    transpiler.add(main);
};
