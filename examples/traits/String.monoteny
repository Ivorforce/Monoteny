-- The file itself represents a module, which is just static declarations for now.

-- The trait is declared here. Thus, this module also becomes a type.
-- A declaration with the same name as the file can be referenced directly.
-- If the name differs, it must be imported or accessed in a qualified manner.
trait String {
    -- By inheriting Hashable, this declaration would be made abstract.
    -- inherit Hashable;

    -- Anything that inherits String must provide access to a characters getter and setter.
    -- By default, of course, this is a stored variable primed in the constructor.
    var characters 'UTF64[Int];
}

-- Static declarations and patterns are defined outside.
def {lhs: String} + {rhs: String} -> String :: {
    String(characters: [lhs, rhs]@.flatten())
}

-- Instance functions and declarations are inside extension declarations.
if self is String {
    def self[idx 'Int] -> String :: {
        String(characters: self.characters[idx])
    }
}

-- Declare any string as hashable
declare String 'Hashable {
    -- Implement the required function
    def hash(into: hasher 'Hasher) {
        self.characters.hash(into: hasher);
    }
}

-- Declare any string as equatable
declare String 'Equatable {
    -- Solve it by delegating all function calls to self.characters.
    -- This works because self.characters is Equatable.
    delegate :: self.characters;
};
